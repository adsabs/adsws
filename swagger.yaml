openapi: 3.0.3
info:
  title: API for Astrophysics Data System (ADS)
  description: |
    ## API for the NASA Astrophysics Data System

    The source code for the project can be found at https://github.com/adsabs.

    Individual components:
    * Search: https://github.com/adsabs/solr-service
    * Stored search: https://github.com/adsabs/vault
    * Libraries: https://github.com/adsabs/biblib-service
    * Export: https://github.com/adsabs/export_service
    * Metrics: https://github.com/adsabs/metrics_service
  termsOfService: https://ui.adsabs.harvard.edu/help/terms/
  contact:
    name: ADS Help
    url: https://github.com/adsabs/adsabs-dev-api
    email: adshelp@cfa.harvard.edu
  version: 1.0.0
servers:
  - url: https://api.adsabs.harvard.edu/{basePath}
    description: Production Server
    variables:
      basePath:
        default: v1
        enum:
          - v1
  - url: https://devapi.adsabs.harvard.edu/{basePath}
    description: Development Server
    variables:
      basePath:
        default: v1
        enum:
          - v1
tags:
  - name: search
  - name: stored search
  - name: libraries
  - name: export (tagged formats)
  - name: export (LaTeX formats)
  - name: export (XML formats)
  - name: export (other)
  - name: metrics
components:
  securitySchemes:
    ApiKeySecurity:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    q:
      name: q
      description: >-
        Query string; for detailed documentation go to
        https://ui.adsabs.harvard.edu/help/search/search-syntax
      in: query
      required: true
      schema:
        type: string
    rows:
      name: rows
      description: How many records to return for this request (default=10, maximum=200)
      in: query
      required: false
      schema:
        type: integer
        default: 10
        maximum: 200
    fq:
      name: fq
      description: Additional filters applied on top of the results of the main query.
      in: query
      required: false
      schema:
        type: array
        maxItems: 10
        items:
          type: string
      style: form
      explode: true
    fl:
      name: fl
      description: Comma delimited set of fields to return; default is 'id'
      in: query
      style: form
      explode: false
      schema:
        type: array
        default: id
        uniqueItems: true
        items:
          type: string
          enum:
            - abstract
            - ack
            - aff
            - aff_id
            - alternate_bibcode
            - alternate_title
            - arxiv_class
            - author
            - author_count
            - author_norm
            - bibcode
            - bibgroup
            - bibstem
            - citation
            - citation_count
            - cite_read_boost
            - classic_factor
            - comment
            - copyright
            - data
            - database
            - date
            - doctype
            - doi
            - eid
            - entdate
            - entry_date
            - esources
            - facility
            - first_author
            - first_author_norm
            - grant
            - grant_agencies
            - grant_id
            - id
            - identifier
            - indexstamp
            - inst
            - isbn
            - issn
            - issue
            - keyword
            - keyword_norm
            - keyword_schema
            - lang
            - links_data
            - nedid
            - nedtype
            - orcid_pub
            - orcid_other
            - orcid_user
            - page
            - page_count
            - page_range
            - property
            - pub
            - pub_raw
            - pubdate
            - pubnote
            - read_count
            - reference
            - simbid
            - title
            - vizier
            - volume
            - year
    start:
      name: start
      description: For pagination, offset of the first returned result (default=0)
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    sort:
      name: sort
      description: >
        The format is 'field' + 'direction' where direction is one of 'asc' or
        'desc' and field is any of the valid indexes. The default sorting is by
        relevance (computed by our search engine). Example\:
        'sort=read_count+desc' Some useful fields to sort by may be date,
        citation_count, or read_count.
      in: query
      required: false
      schema:
        type: string
        enum:
          - id asc
          - author_count asc
          - bibcode asc
          - citation_count asc
          - citation_count_norm asc
          - classic_factor asc
          - first_author asc
          - date asc
          - entry_date asc
          - read_count asc'
          - score asc
          - id desc
          - author_count desc
          - bibcode desc
          - citation_count desc
          - citation_count_norm desc
          - classic_factor desc
          - first_author desc
          - date desc
          - entry_date desc
          - read_count desc
          - score desc
    orcidId:
      name: orcidId
      in: path
      description: ORCiD ID, i.e. '0000-0000-0000-0000'
      schema:
        type: string
      required: true
    OrcidAuthorization:
      name: Orcid-Authorization
      in: header
      description: >
        'access_token' of the orcid user (will be passed on to the ORCiD API)
      schema:
        type: string
    jsonpayload:
      name: jsonpayload
      in: header
      description: >
        JSON object, to be stored for the user. **WARNING**: the JSON will
        replace the existing one.

        If you send an empty POST request, the stored data will be replaced with
        `{}`.
      schema:
        type: object
    bibcode:
      name: bibcode
      description: Bibcode to export
      required: true
      in: path
      schema:
        type: string
    link:
      name: link
      description: Query URL
      required: true
      in: path
      schema:
        type: string
  responses:
    QTree:
      description: Abstract Syntax Tree of a Parsed query
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/qtree'
    SearchResults:
      description: Results returned by the search engine
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/results'
    VaultResponse:
      description: Response from vault storage service
      content:
        application/json:
          schema:
            type: object
            properties:
              numfound:
                readOnly: true
                type: integer
                description: >
                  Number of docs this query found (the last time it was executed; this
                  number is up to date only when the query is stored). But if you see number higher
                  than 0 then you can be sure that the query was executed.
              qid:
                readOnly: true
                type: string
                description: >
                  Query ID (unique hash identifying all the parameters; it is computed
                  from the supplied query parameters)
              query:
                type: string
                description: >
                  Serialized JSON input search parameters
    ErrorResponse:
      description: Response returned with an error status code
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    ExportResponse:
      description: >
            Returns export
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
              export:
                type: string
    ExportResponseGet:
      description: >
            Returns export
      content:
        application/json:
          schema:
            type: string
  schemas:
    qtree:
      type: object
      properties:
        responseHeader:
          $ref: '#/components/schemas/responseHeader'
        qtree:
          type: string
          description: serialized JSON
    results:
      type: object
      properties:
        responseHeader:
          $ref: '#/components/schemas/responseHeader'
        numFound:
          type: integer
        start:
          type: integer
        docs:
          type: array
          items:
            $ref: '#/components/schemas/doc'
    doc:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        bibcode:
          type: string
        title:
          type: string
    responseHeader:
      type: object
      properties:
        status:
          description: Status code as returned by the search engine
          type: integer
        QTime:
          type: integer
          description: >-
            search time in millisecs (only search, without faceting, latency and
            all other steps)
        parameters:
          description: Input search parameters
          type: object
          properties:
            q:
              type: string
            fl:
              type: string
            start:
              type: string
            rows:
              type: string
    vaultObject:
      type: object
      properties:
        q:
          $ref: '#/components/parameters/q'
        fl:
          $ref: '#/components/parameters/fl'
        start:
          $ref: '#/components/parameters/start'
        rows:
          $ref: '#/components/parameters/rows'
        sort:
          $ref: '#/components/parameters/sort'
        fq:
          type: string
          description: >
            must be set to `'{!bitset}'`
        bigquery:
          type: string
          description: >
            new line separated list of bibcodes, the first line is the name of
            the index that will be searched, right now we only support search in `bibcode` index
    basicMetricsResponse:
      type: object
      properties:
        basic stats:
          type: object
          properties:
            average number of downloads:
              type: number
            average number of reads:
              type: number
            median number of downloads:
              type: number
            median number of reads:
              type: number
            normalized paper count:
              type: number
            number of papers:
              type: integer
            recent number of downloads:
              type: integer
            recent number of reads:
              type: integer
            total number of downloads:
              type: integer
            total number of reads:
              type: integer
        basic stats refereed:
          type: object
          properties:
            average number of downloads:
              type: number
            average number of reads:
              type: number
            median number of downloads:
              type: number
            median number of reads:
              type: number
            normalized paper count:
              type: number
            number of papers:
              type: integer
            recent number of downloads:
              type: integer
            recent number of reads:
              type: integer
            total number of downloads:
              type: integer
            total number of reads:
              type: integer
        citation stats:
          type: object
          properties:
            average number of citations:
              type: number
            average number of refereed citations:
              type: number
            median number of citations:
              type: number
            median number of refereed citations:
              type: number
            normalized number of citations:
              type: number
            normalized number of refereed citations:
              type: number
            number of citing papers:
              type: integer
            number of self-citations:
              type: integer
            self-citations:
              type: array
              items:
                type: string
            total number of citations:
              type: integer
            total number of refereed citations:
              type: integer
        citation stats refereed:
          type: object
          properties:
            average number of citations:
              type: number
            average number of refereed citations:
              type: number
            median number of citations:
              type: number
            median number of refereed citations:
              type: number
            normalized number of citations:
              type: number
            normalized number of refereed citations:
              type: number
            number of citing papers:
              type: integer
            number of self-citations:
              type: integer
            self-citations:
              type: array
              items:
                type: string
            total number of citations:
              type: integer
            total number of refereed citations:
              type: integer
        histograms:
          type: object
          properties:
            citations:
              type: object
              properties:
                nonrefereed to nonrefereed:
                  type: object
                  properties:
                    year:
                      type: integer
                nonrefereed to nonrefereed normalized:
                  type: object
                  properties:
                    year:
                      type: number
                nonrefereed to refereed:
                  type: object
                  properties:
                    year:
                      type: integer
                nonrefereed to refereed normalized:
                  type: object
                  properties:
                    year:
                      type: number
                refereed to nonrefereed:
                  type: object
                  properties:
                    year:
                      type: integer
                refereed to nonrefereed normalized:
                  type: object
                  properties:
                    year:
                      type: number
                refereed to refereed:
                  type: object
                  properties:
                    year:
                      type: integer
                refereed to refereed normalized:
                  type: object
                  properties:
                    year:
                      type: number
            reads:
              type: object
              properties:
                all reads:
                  type: object
                  properties:
                    year:
                      type: integer
                all reads normalized:
                  type: object
                  properties:
                    year:
                      type: number
                refereed reads:
                  type: object
                  properties:
                    year:
                      type: integer
                refereed reads normalized:
                  type: object
                  properties:
                    year:
                      type: number
        skipped bibcodes:
          type: array
          items:
            type: string
  requestBodies:
    exportBody:
      description: >
          JSON containing the bibcodes to export
      content:
        application/json:
          schema:
            type: object
            required:
              - bibcode
            properties:
              bibcode:
                type: array
                description: >
                  Bibcodes to export
                items:
                  type: string
security:
  - ApiKeySecurity: []
paths:
  /search/query:
    get:
      summary: 01. Search ADS
      description: >
        Do a search.


        Query the search engine and return results. All parameters have to be
        properly url-encoded UTF-8. The response body will always be JSON
        encoded.


        ## Example Search

        `q=bibcode:2012A%26A...542A..16R&fl=bibcode,author,pub,identifier,title,property,abstract,keyword,aff`

        ## Example Response

        ```{
          "responseHeader":{
            "status":0,
            "QTime":3,
            "params":{
              "q":"bibcode:2012A&A...542A..16R",
              "fl":"bibcode,author,pub,identifier,title,property,abstract,keyword",
              "start":"0",
              "rows":"10",
              "wt":"json"}},
          "response":{"numFound":1,"start":0,"docs":[
            {
              "identifier":["2012arXiv1204.4485R",
                "2012A&A...542A..16R",
                "10.1051/0004-6361/201118723",
                "10.1051/0004-6361/201118723",
                "arXiv:1204.4485",
                "2012arXiv1204.4485R"],
              "abstract":"X-ray surveys contain sizable numbers [...],
              "property":["ARTICLE",
                "ASSOCIATED",
                "DATA",
                "EPRINT_OPENACCESS",
                "ESOURCE",
                "OPENACCESS",
                "PUB_OPENACCESS",
                "REFEREED"],
              "bibcode":"2012A&A...542A..16R",
              "author":["Ranalli, P.",
                "Comastri, A.",
                "Zamorani, G.",
                "Cappelluti, N.",
                "Civano, F.",
                "Georgantopoulos, I.",
                "Gilli, R.",
                "Schinnerer, E.",
                "Smolčić, V.",
                "Vignali, C."],
              "pub":"Astronomy and Astrophysics",
              "keyword":["X-rays: galaxies",
                "radio continuum: galaxies",
                "galaxies: fundamental parameters",
                "galaxies: star formation",
                "galaxies: active",
                "galaxies: high-redshift",
                "Astrophysics - Cosmology and Extragalactic Astrophysics"],
              "title":["X-ray properties of radio-selected star forming galaxies in the Chandra-COSMOS survey"]}]
          }}
        ```

        ## Example Search Requests

        Query | Explanation

        ------|-------------------------------------------------
         `q=bibcode:2011ApJ...737..103S` |  Search by bibcode
         `q=black+holes&fq=database:astronomy` |  Search for "black holes", restricted to astronomy content
         `q=dark+energy&fq=author:"Civano,+F"&sort=citation_count+desc` |  Search for "dark energy", filter by author, sort by citation count
        `q=dark+energy&sort=citation_count+desc&fl=bibcode,property` |   Return
        *bibcode* and *property* values

        `q=author:"Kurtz,+M"&fq=property:refereed`|   Limit a search to only
        refereed articles

        `q=transiting+exoplanets&rows=200`|  Search for "transiting exoplanets",
        get 200 rows

        `q=transiting+exoplanets&rows=200&start=201`|   Same search but get the
        next 200 rows

      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/fq'
        - $ref: '#/components/parameters/fl'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/rows'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/SearchResults'
        '400':
          description: Malformed request
        '404':
          description: Resource not found
        '499':
          description: Server too busy
        '500':
          description: Server error
      tags:
        - search
  /search/qtree:
    get:
      summary: 02. Search ADS and return a query tree object
      description: >
        Returns a `query tree` (Abstract Syntax Tree - AST) as understood by our
        query parser. The structure can be used by external applications to
        rewrite the query or check its syntactic correctness.


        ## Example result

        ```JSON

        {
             "qtree": "\n{\"name\":\"OPERATOR\", \"label\":\"DEFOP\", \"children\": [\n    {\"name\":\"MODIFIER\", \"label\":\"MODIFIER\", \"children\": [\n        {\"name\":\"TMODIFIER\", \"label\":\"TMODIFIER\", \"children\": [\n            {\"name\":\"FIELD\", \"label\":\"FIELD\", \"children\": [\n                {\"name\":\"QNORMAL\", \"label\":\"QNORMAL\", \"children\": [\n                    {\"name\":\"TERM_NORMAL\", \"input\":\"star\", \"start\":0, \"end\":3}]\n                }]\n            }]\n        }]\n    }]\n}",
             "responseHeader": {
              "status": 0,
              "QTime": 6,
              "params": {
               "q": "star",
               "wt": "json",
               "fl": "id"
              }
             }
            }
        ```
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/fq'
        - $ref: '#/components/parameters/fl'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/rows'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          $ref: '#/components/responses/QTree'
        '400':
          description: Malformed request
        '404':
          description: Resource not found
        '499':
          description: Server too busy
        '500':
          description: Server error
      tags:
        - search
  /search/bigquery:
    post:
      summary: 03. Search using bigquery
      description: >
        Search endpoint which accepts a list of many IDs (bibcodes). Supports
        paging.


        This endpoint accepts standard search query parameters and returns
        standard search results, but it also accepts as input a very large query
        (i.e. a query that can be expressed only as a list of search
        criteria, typically IDs). There is currently no limit to the size of the
        submitted data (besides buffer/time limits imposed by our API
        frontend); however, there are severe limits on how often you can call
        this endpoint. Typically, only 100 requests per day per user are allowed.


        The `bigquery` is always executed as a filter **after** the main query
        (to filter out unwanted results and keep only the results
        specified by the `bigquery`). You may want to use `q=*:*` to filter
        contents of the whole database, however it is advisable to make
        the `q` as specific as possible. Broad queries have higher `qTime`
        (execution time) and that will be counted towards your rate-limit
        (in the future).


        The bigquery filter is *applied only after* the main search (i.e. it
        limits results of the main search).


        ## Example requests


        Python


        ```
          import requests
          bibcodes="bibcode\n1907AN....174...59.\n1908PA.....16..445.\n1989LNP...334..242S"
          r = requests.post('https://api.adsabs.harvard.edu/v1/search/bigquery',
               params={'q':'*:*', 'wt':'json', 'fq':'{!bitset}', 'fl':'bibcode'},
               headers={'Authorization': 'Bearer:TOKEN'},
               data=bibcodes)
        ```


        Bash curl


        ```
          curl 'https://api.adsabs.harvard.edu/v1/search/bigquery?q=*:*&fl=bibcode' \
          -X 'POST' -H 'Authorization: Bearer TOKEN' -H 'Content-Type: big-query/csv' \
          -d $'bibcode\n1907AN....174...59.\n1908PA.....16..445.\n1989LNP...334..242S'
        ```
      security:
        - ApiKeySecurity: []
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/fq'
        - $ref: '#/components/parameters/fl'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/rows'
        - $ref: '#/components/parameters/sort'
      requestBody:
        description: >
          Newline separated list of values; the first line specifies the index
          field, the rest are the search values. <br/> Currently, we
          allow searching in `bibcode` index only. You can submit `canonical`
          as well as `alternate` bibcodes - the search will automatically
          match both. In the future, the list of available indexes may be
          extended.


          Note: to correctly format the POST payload, including the newline (\n)
          characters, in a bash curl request, use ANSI-C quoting (e.g. `$'...'`)
          as shown in the examples.
        content:
          big-query/csv:
            schema:
              type: string
      responses:
        '200':
          $ref: '#/components/responses/SearchResults'
        '404':
          $ref: '#/components/responses/SearchResults'
        '499':
          description: Server too busy
        '500':
          description: Server error
      tags:
        - search
  /vault/query:
    post:
      summary: 01. Save a query
      description: |
        Save a query for later execution. Can be either a regular query or a bigquery.

        ## Example request

        ```bash
          $ curl 'https://api.adsabs.harvard.edu/v1/vault/query' -H 'Authorization: Bearer:TOKEN' \
            -X POST -d $'{"q":"*:*", "bigquery": "bibcode\\n2015IAUGA..2257982A\\n2015IAUGA..2257768A\\n2015IAUGA..2257639R", "fq": "{!bitset}"}' \
            -H 'Content-Type: application/json'

          > {"qid": "00b39fe4274760f5d8b348815a661ee2", "numFound": 3}
        ```
      requestBody:
        description: >
          JSON object holding the values to submit.


          Note: to correctly format the POST payload if running a bigquery,
          including the newline (\n) characters, in a bash curl request,
          use ANSI-C quoting (e.g. `$'...'`) as shown in the examples.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vaultObject'
      tags:
        - stored search
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/VaultResponse'
        '404':
          description: QID object not found
  /vault/query/{queryId}:
    get:
      summary: 02. Retrieve information about a stored query
      description: |
        Retrive information about the previously stored query.

        ## Example output

        ```JSON
        {
            "numfound": 9,
            "qid": "dcd173130bbbbb957eafd866baf38b2c",
            "query": "{\"query\": \"fq=%7B%21bitset%7D&q=%2A%3A%2A\", \"bigquery\": \"bibcode\\n15ASPC..495..40015IAUGA..2257982A\\n2015IAUGA..2257768A\\n2015IAUGA..2257639R\\n2015ASPC..492..208G\\n2015ASPC..492..204F\\n2015ASPC..492..189A\\n2015ASPC..492..150T\\n2015ASPC..492...85E\\n2015ASPC..492...80H\\n2015AAS...22533656H\"}"
        }
        ```
      parameters:
        - name: queryId
          description: QID returned from the POST operation
          required: true
          in: path
          schema:
            type: string
      tags:
        - stored search
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/VaultResponse'
        '404':
          description: QID object not found
  /vault/execute_query/{queryId}:
    get:
      summary: 03. Search using a stored query
      description: >
        Search using the stored query and return the same data as Search API
        endpoint.


        ## Example response


        ```JSON
          {
            "response": {
                "docs": [
                    {
                        "id": "10690723"
                    },
                    {
                        "id": "11057363"
                    },
                    {
                        "id": "10564749"
                    },
                    {
                        "id": "10796089"
                    },
                    {
                        "id": "10867252"
                    },
                    {
                        "id": "10867221"
                    },
                    {
                        "id": "10867251"
                    },
                    {
                        "id": "10867277"
                    },
                    {
                        "id": "11057812"
                    }
                ],
                "numFound": 9,
                "start": 0
            },
            "responseHeader": {
                "QTime": 6,
                "params": {
                    "fl": "id",
                    "fq": "{!bitset}",
                    "q": "*:*",
                    "wt": "json"
                },
                "status": 0
            }
          }
        ```
      parameters:
        - name: queryId
          description: QID returned from the POST operation
          required: true
          in: path
          schema:
            type: string
        - name: jsonobj
          description: >-
            You can submit query parameters that override parts of the saved
            query.
          required: false
          in: header
          schema:
            $ref: '#/components/schemas/vaultObject'
      tags:
        - stored search
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/SearchResults'
        '404':
          description: QID object not found
  /biblib/libraries:
    get:
      summary: 01. View all libraries for a given user
      description: >
        View all libraries for the user associated with the given API token.
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: Metadata for all libraries for a given user
          content:
            application/json:
              schema:
                type: object
                properties:
                  libraries:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        id:
                          type: string
                        description:
                          type: string
                        num_documents:
                          type: integer
                        date_created:
                          type: string
                        date_last_modified:
                          type: string
                        permission:
                          type: string
                        public:
                          type: boolean
                        num_users:
                          type: integer
                        owner:
                          type: string
        '400':
          description: >
            No username passed
    post:
      summary: 03. Create a new library
      description: >
        Create a library for the requesting user. Returns the metadata of the
        library created.
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the metadata and bibcodes of the library to be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: >
                    (optional) name of the library (must be unique for that user).
                    The default is Untitled Library, with an incremented integer
                    starting with 1 appended.
                description:
                  type: string
                  description: >
                    (optional) description of the library. The default is "My ADS library"
                public:
                  type: boolean
                  default: false
                  description: >
                    (optional) set to true to allow public access. The default is false,
                    or a private library
                bibcode:
                  type: array
                  description: >
                    (optional) list of bibcodes to add. The default is an empty library
                  items:
                    type: string
      responses:
        '200':
          description: >
            Metadata of the library just created
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  id:
                    type: string
                  description:
                    type: string
                  bibcode:
                    type: array
                    items:
                      type: string
        '400':
          description: >
            No username passed, or wrong type passed
        '409':
          description:
            Duplicate library name exists
  /biblib/libraries/{library_id}:
    get:
      summary: 02. View a single library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        View metadata and contents of a specific library.
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: Metadata and contents of the given library
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    type: object
                    properties:
                      owner:
                        type: string
                        description: User who created the library
                      num_documents:
                        type: integer
                        description: Number of bibcodes in the library
                      public:
                        type: boolean
                        description: True means it is public
                      num_users:
                        type: integer
                        description: Number of users with permissions to this library
                      date_created:
                        type: string
                        description: Date library was created
                      name:
                        type: string
                        description: Name of library
                      description:
                        type: string
                        description: Description of library
                      permission:
                        type: string
                        description: Permission type, can be 'read', 'write', 'admin', or 'owner'
                      id:
                        type: string
                        description: Library ID
                      date_last_modified:
                        type: string
                        description: Date library was last modified
                  documents:
                    type: array
                    description: Array of bibcodes in library
                    items:
                      type: string
                  solr:
                    type: object
                    description: Response from solr, when validating library contents
                    properties:
                      response:
                        type: object
                        properties:
                          docs:
                            type: array
                            items:
                              type: object
                              properties:
                                bibcode:
                                  type: string
                          numFound:
                            type: integer
                          start:
                            type: integer
                      responseHeader:
                        type: object
                        properties:
                          QTime:
                            type: integer
                          params:
                            type: object
                            properties:
                              q:
                                type: string
                              fl:
                                type: string
                              start:
                                type: string
                              internal_logging_params:
                                type: string
                              sort:
                                type: string
                              fq:
                                type: string
                              rows:
                                type: string
                              wt:
                                type: string
                          status:
                            type: integer
                  updates:
                    type: object
                    description: Updates from Solr validation
                    properties:
                      duplicates_removed:
                        type: integer
                        description: Number of bibcodes removed because they are duplicates
                      update_list:
                        type: array
                        description: >
                          List of dictionaries such that a single element describes
                          the original bibcode (key) and the updated bibcode now being stored (item)
                        items:
                          type: object
                      num_updated:
                        type: integer
                        description: Number of documents modified based on the response from Solr
  /biblib/libraries/operations/{library_id}:
    post:
      summary: 10. Perform set operations on one or more libraries
      parameters:
        - name: library_id
          description: Library ID for the primary library
          required: true
          in: path
          schema:
            type: string
      description: >
        Perform set operations on one or more libraries. The library_id (string) is
        the unique identifier of the primary library, as specified in the /libraries
        GET response. Depending on the operation, a secondary library ID may need to
        be passed in the post payload.

        ## Examples

        **Union**: take the union of 3 libraries, using the default description and public settings

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/iRZhyhvaSWe0uWwcXKt77w \
            -X POST \
            -d '{"action": "union", "libraries": ["rdRs4g4AQ522k9TJ2umtVA", "s56fjycaRMKxw6tDEr31XQ"], "name": "New union library"}'
        ```


        *Response*:


        `{"id": "BeUbSWXtTPCaRhRV3nec_w", "bibcode": ["2009A&A...502..515G", "2011ApJ...734...87R", "2010ApJ...710..248C", "2003ApJ...595..665X", "2011ApJ...731L..12S", "2010ApJ...721..505R", "2010ApJ...710L.156R", "2010ApJ...723.1255R", "2006ApJ...639L..51A", "2001AJ....122.2993S", "2010ASPC..423..355R", "2010A&A...518A..59G", "2010ApJ...721L..48K"], "description": "Union of 891661ca-1bda-4967-b4b9-6c1c5cab7bef with [u'rdRs4g4AQ522k9TJ2umtVA', u's56fjycaRMKxw6tDEr31XQ']", "name": "New union library"}`


        **Intersection**: take the intersection of 2 libraries, using the default public settings

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \
            -X POST \
            -d '{"action": "intersection", "libraries": ["rdRs4g4AQ522k9TJ2umtVA"], "name": "New intersection library", "description": "Sample intersection library"}'
        ```


        *Response*:


        `{"id": "8V8DzNqyQuOyTX6RF9x7qQ", "bibcode": ["2001AJ....122.2993S", "2009A&A...502..515G", "2006ApJ...639L..51A", "2010ApJ...710..248C", "2003ApJ...595..665X", "2010A&A...518A..59G", "2011ApJ...731L..12S"], "description": "Sample intersection library", "name": "New intersection library"}`


        **Difference**: take the difference of 2 libraries

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \
            -X POST \
            -d '{"action": "difference", "libraries": ["rdRs4g4AQ522k9TJ2umtVA"], "name": "New difference library", "description": "Sample difference library", "public": true}'
        ```


        *Response*:


        `{"id": "9KBh8sVHQxaVkoPALtoXgg", "bibcode": ["2011ApJ...734...87R", "2010ApJ...723.1255R", "2010ApJ...710L.156R", "2010ASPC..423..355R", "2010ApJ...721L..48K", "2010ApJ...721..505R"], "description": "Sample difference library", "name": "New difference library"}`


        **Empty**: empty a library of all of its bibcode contents

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/9KBh8sVHQxaVkoPALtoXgg \
            -X POST \
            -d '{"action": "empty"}'
        ```

        *Response*:


        `{"public": true, "bibcode": [], "name": "New difference library", "description": "Sample difference library"}`


        **Copy**: copy the bibcode contents from the primary library to the secondary library (this will not empty the library first)

        ``` bash
          $ curl -H "Authorization: Bearer $token" -H "Content-Type: application/json" \
            https://api.adsabs.harvard.edu/v1/biblib/libraries/operations/BeUbSWXtTPCaRhRV3nec_w \
            -X POST \
            -d '{"action": "copy", "libraries": ["9KBh8sVHQxaVkoPALtoXgg"]}'
        ```


        *Response*:


        `{"public": true, "bibcode": ["2009A&A...502..515G", "2010ApJ...710L.156R", "2010ApJ...710..248C", "2003ApJ...595..665X", "2011ApJ...731L..12S", "2010ApJ...721..505R", "2011ApJ...734...87R", "2010ApJ...723.1255R", "2006ApJ...639L..51A", "2001AJ....122.2993S", "2010ASPC..423..355R", "2010A&A...518A..59G", "2010ApJ...721L..48K"], "name": "New difference library", "description": "Sample difference library"}`
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the action to be performed and metadata of the library to be created.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: >
                    Set operation to perform; allowed values are:
                      * union: take the union of the primary and the secondary
                      libraries. The result is saved to a new library.
                      * intersection: take the intersection of the primary and the
                      secondary libraries. The result is saved to a new library
                      * difference: take the difference between the primary and the
                      secondary libraries. The result is saved to a new library
                      * copy: copy the contents of the primary library into the
                      secondary library. The secondary library is not emptied first;
                      use the empty operation on the secondary library first in order
                      to create a duplicate of the primary library in the secondary library
                      * empty: empty the primary library of its contents (no secondary
                      library ID is needed)
                libraries:
                  type: array
                  description: >
                    list of secondary library IDs; multiple secondary libraries are allowed
                    for [union, intersection, difference]; one secondary library is allowed
                    for copy; no secondary libraries are allowed for empty
                  items:
                    type: string
                name:
                  type: string
                  description: >
                    name of the new library to be created for [union, intersection, difference];
                    the name must be unique for a given user; if no name is specified, the
                    name used will be "Untitled" with a timestamp
                description:
                  type: string
                  description: >
                    description of the new library to be created for [union, intersection,
                    difference]; if no description is specified, the description used will
                    include the set operation used and the primary and secondary library IDs
                public:
                  type: boolean
                  description: >
                    sets whether the new library created by [union, intersection,
                    difference] is publicly viewable or not; the new library will be
                    private unless otherwise specified
      responses:
        '200':
          description: Metadata for created/modified library
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: ID of created library (if any)
                    type: string
                  name:
                    description: Name of created/modified library
                    type: string
                  description:
                    description: Description of created/modified library
                    type: string
                  bibcode:
                    description: Bibcodes in created/modified library
                    items:
                      type: string
        '400':
          description: >
            No username passed, bad library ID passed, wrong type passed,
            secondary libraries not specified where required, too many secondary libraries
            specified, or user requested a non-standard operation
        '403':
          description: >
            User does not have permission to perform this operation
        '409':
          description: >
            Duplicate library name exists
  /biblib/documents/{library_id}:
    post:
      summary: 04. Add or remove documents from a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Add or delete a document to a given library. Returns the number
        of documents added or removed.


        The following type of user can add or remove documents:

        * owner

        * admin

        * write
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the action to be performed and metadata of the library to be created.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - bibcode
              properties:
                bibcode:
                  type: array
                  description: >
                    List of bibcodes to be added or removed
                  items:
                    type: string
                action:
                  type: string
                  description: >
                    'add' or 'remove' to add or remove the given bibcodes from the specified library
      responses:
        '200':
          description:
            Returns number of bibcodes added or removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  number_added:
                    type: integer
                    description: >
                      Number of bibcodes added, if 'add' is used
                  number_removed:
                    type: integer
                    description: >
                      Number of bibcodes removed, if 'remove' is used
        '400':
          description: >
            No username passed, bad library ID passed, wrong type passed,
            or user requested a non-standard operation
        '403':
          description: >
            User does not have permission to perform this operation
    put:
      summary: 05. Update the metadata of a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Update the metadata of a given library.


        The following type of user can edit library metadata:

        * owner

        * admin
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the metadata to update. If some fields don't
          need to be changed, they don't need to be included in the payload.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: >
                    New name of the library
                description:
                  type: string
                  description: >
                    New library description
                public:
                  type: boolean
                  description: >
                    true if the library should be publicly viewable,
                    false if it should be private (note that this is case
                    sensitive and should be lower case)
      responses:
        '200':
          description: >
            Returns the key/value that was requested to be updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  public:
                    type: boolean
        '400':
          description: >
            No username passed, bad library ID passed, or wrong type passed
        '403':
          description: >
            User does not have permission to perform this operation
        '409':
          description: >
            Duplicate library name exists
        '410':
          description: >
            Library specified does not exist
    delete:
      summary: 06. Delete a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Delete the given library.


        The following type of user can delete the library:

        * owner
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: >
            Returns empty object
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >
            No username passed or bad library ID passed
        '403':
          description: >
            User does not have permission to perform this operation
        '410':
          description: >
            Library specified does not exist
  /biblib/permissions/{library_id}:
    get:
      summary: 07. View permissions of a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        View permissions of a specific library.
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: List of all permissions for the user for the library
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: array
                    description: >
                      Key is email of the user, item is a list of that user's
                      permissions for the given library
                    items:
                      type: string
        '400':
          description: >
            No username passed, or bad library ID passed
        '403':
          description: >
            User does not have permission to perform this operation
    post:
      summary: 08. Edit permission of a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Edit the permissions of a library


        The following type of user can add or remove documents:

        * owner

        * admin
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the email of the user whose permissions will be modified
          and the permissions to be added or removed. User may not modify their
          own permissions
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - permission
              properties:
                email:
                  type: string
                  description: >
                    Email address of user whose permissions will be modified
                permission:
                  type: object
                  description: >
                    Only required to include permissions that will be modified
                  properties:
                    read:
                      type: boolean
                    write:
                      type: boolean
                    admin:
                      type: boolean
      responses:
        '200':
          description: >
            Returns empty object
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >
            No username passed, bad library ID passed, or wrong type passed
        '403':
          description: >
            User does not have permission to perform this operation
        '404':
          description: >
            User does not have an ADS account
  /biblib/transfer/{library_id}:
    post:
      summary: 09. Transfer ownership of a library
      parameters:
        - name: library_id
          description: Library ID
          required: true
          in: path
          schema:
            type: string
      description: >
        Transfer ownership of a library from one user to another


        The following type of user can add or remove documents:

        * owner
      tags:
        - libraries
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the email of the user that library ownership will
          be transferred to
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: >
                    Email address of user who ownership will be transferred to
      responses:
        '200':
          description: >
            Returns empty object
          content:
            application/json:
              schema:
                type: object
        '400':
          description: >
            No username passed, bad library ID passed, or wrong type passed
        '403':
          description: >
            User does not have permission to perform this operation
        '404':
          description: >
            User does not have an ADS account
  /export/bibtexabs:
    post:
      summary: BibTeX + abstract export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the BibTeX + abstract format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: BibTeX + abstract export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the BibTeX + abstract format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/bibtex:
    post:
      summary: BibTeX export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the BibTeX format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: BibTeX export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the BibTeX format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/ads:
    post:
      summary: ADS (generic tagged) export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the ADS format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: ADS (generic tagged) export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the ADS format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/endnote:
    post:
      summary: EndNote export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the EndNote format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: EndNote export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the EndNote format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/procite:
    post:
      summary: ProCite export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the ProCite format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: ProCite export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the ProCite format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/ris:
    post:
      summary: RIS (Refman) export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the RIS (Refman) format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: RIS (Refman) export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the RIS (Refman) format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/refworks:
    post:
      summary: RefWorks export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the RefWorks format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: RefWorks export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the RefWorks format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/medlars:
    post:
      summary: MEDLARS export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the MEDLARS format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: MEDLARS export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the MEDLARS format
      tags:
        - export (tagged formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/aastex:
    post:
      summary: AASTeX export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the AASTeX format
      tags:
        - export (LaTeX formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: AASTeX export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the AASTeX format
      tags:
        - export (LaTeX formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/icarus:
    post:
      summary: Icarus export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the Icarus format
      tags:
        - export (LaTeX formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: Icarus export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the Icarus format
      tags:
        - export (LaTeX formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/mnras:
    post:
      summary: MNRAS export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the MNRAS format
      tags:
        - export (LaTeX formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: MNRAS export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the MNRAS format
      tags:
        - export (LaTeX formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/soph:
    post:
      summary: Solar Physics (SoPh) export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the Solar Physics (SoPh) format
      tags:
        - export (LaTeX formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: Solar Physics (SoPh) export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the Solar Physics (SoPh) format
      tags:
        - export (LaTeX formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/dcxml:
    post:
      summary: Dublin Core (DC) XML export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the Dublin Core (DC) XML format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: Dublin Core (DC) XML export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the Dublin Core (DC) XML format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/refxml:
    post:
      summary: REF-XML export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the REF-XML format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: REF-XML export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the REF-XML format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/refabsxml:
    post:
      summary: REFABS-XML export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the REFABS-XML format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: REFABS-XML export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the REFABS-XML format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/votable:
    post:
      summary: VOTables export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the VOTables format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: VOTables export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the VOTables format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/rss:
    post:
      summary: RSS export for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the RSS format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: RSS export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the RSS format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/rss/{link}:
    get:
      summary: RSS export for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
        - $ref: '#/components/parameters/link'
      description: >
        Export the given bibcode in the RSS format
      tags:
        - export (XML formats)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/ieee:
    post:
      summary: IEEE export (Unicode-encoded) for multiple bibcodes (POST)
      description: >
        Export the given bibcodes in the IEEE format
      tags:
        - export (other)
      security:
        - ApiKeySecurity: []
      requestBody:
        $ref: '#/components/requestBodies/exportBody'
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
    get:
      summary: IEEE export (Unicode-encoded) for a single bibcode (GET)
      parameters:
        - $ref: '#/components/parameters/bibcode'
      description: >
        Export the given bibcode in the IEEE format
      tags:
        - export (other)
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          $ref: '#/components/responses/ExportResponseGet'
        '404':
          description: >
            No result from Solr
  /export/csl:
    post:
      summary: CSL export for one or more bibcodes (POST)
      description: >
        Export the given bibcodes in the given style and format
      tags:
        - export (other)
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the bibcodes to export, and the style and format
          to export them in.
        content:
          application/json:
            schema:
              type: object
              required:
                - bibcodes
                - style
                - format
              properties:
                bibcodes:
                  description: Bibcodes to export
                  type: array
                  items:
                    type: string
                style:
                  description: Journal style to use
                  type: string
                  enum:
                    - aastex
                    - icarus
                    - mnras
                    - soph
                    - aspc
                    - apsj
                    - aasj
                    - ieee
                format:
                  description: Output format; use 1 for Unicode, 2 for HTML, or 3 for LaTeX
                  type: integer
                journalformat:
                  description: >
                    Format of journal name; used only for aastex, aspc, and aasj styles.
                    Use 1 for AASTeX macros (default), 2 for journal abbreviations, or 3 for full journal name.
                  type: integer
                sort:
                  description: Sort order for export
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
  /export/custom:
    post:
      summary: Custom-format export for one or more bibcodes (POST)
      description: >
        Export the given bibcodes in the given custom format
      tags:
        - export (other)
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the bibcodes to export, and the custom format
          to export them in.
        content:
          application/json:
            schema:
              type: object
              required:
                - bibcodes
                - format
              properties:
                bibcodes:
                  description: Bibcodes to export
                  type: array
                  items:
                    type: string
                format:
                  description: >
                    Custom format; see the [main export documentation](https://ui.adsabs.harvard.edu/help/actions/export)
                    for more information.
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/ExportResponse'
        '404':
          description: >
            No result from Solr
  /metrics:
    post:
      summary: Retrieve metrics for one or more bibcodes.
      description: >
        This endpoint retrieves some or all of the available citation metrics for
        one or more bibcodes. More documentation is available [here](https://github.com/adsabs/adsabs-dev-api/blob/master/Metrics_API.ipynb).


        The available statistics types are:


        * 'basic': publication and usage stats (all papers, and just refereed papers); returns
        'basic stats' and 'basic stats refereed'

        * 'citations': citation stats; returns 'citation stats' and 'citation stats refereed'

        * 'indicators': indicators, like the h-index, g-index, m-index, etc.; returns
        'indicators' and 'indicators refereed'

        * 'histograms': publication, citation, reads and downloads histograms; returns 'histograms'

        * 'timeseries': time series for a set of indicators; returns 'time series'
      tags:
        - metrics
      security:
        - ApiKeySecurity: []
      requestBody:
        description: >
          JSON containing the bibcode(s) to produce metrics for, as well as types of metrics desired.
          Depending on the type of metrics requested, other options may be included in the payload.
        content:
          application/json:
            schema:
              type: object
              required:
                - bibcodes
              properties:
                bibcodes:
                  description: Bibcode(s) to produce metrics for
                  type: array
                  items:
                    type: string
                types:
                  description: Types of metrics to return. If not specified, all metrics will be returned.
                  type: array
                  items:
                    type: string
                    enum:
                      - basic
                      - citations
                      - indicators
                      - histograms
                      - timeseries
                histograms:
                  description: >
                    If the metrics type is 'histograms', types of histograms to return.
                    If not specified, all histograms will be returned.


                    The available histogram types are:


                    * 'publications': returns 'all publications', 'refereed publications', 'all publications normalized', 'refereed publications normalized'

                    * 'reads': returns 'all reads', 'refereed reads', 'all reads normalized', 'refereed reads normalized'

                    * 'downloads': returns 'all downloads', 'refereed downloads', 'all downloads normalized', 'refereed downloads normalized'

                    * 'citations': returns 'refereed to refereed', 'nonrefereed to refereed', 'refereed to nonrefereed', 'nonrefereed to nonrefereed', 'refereed to refereed normalized', 'nonrefereed to refereed normalized', 'refereed to nonrefereed normalized', 'nonrefereed to nonrefereed normalized'
                  type: array
                  items:
                    type: string
                    enum:
                      - publications
                      - reads
                      - downloads
                      - citations
      responses:
        '200':
          description: >
            JSON containing the requested metrics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicMetricsResponse'
                  - type: object
                    properties:
                      indicators:
                        type: object
                        properties:
                          g:
                            type: integer
                          h:
                            type: integer
                          i10:
                            type: integer
                          i100:
                            type: integer
                          m:
                            type: number
                          read10:
                            type: number
                          riq:
                            type: integer
                          tori:
                            type: number
                      indicators refereed:
                        type: object
                        properties:
                          g:
                            type: integer
                          h:
                            type: integer
                          i10:
                            type: integer
                          i100:
                            type: integer
                          m:
                            type: number
                          read10:
                            type: number
                          riq:
                            type: integer
                          tori:
                            type: number
                      time series:
                        type: object
                        properties:
                          g:
                            type: object
                            properties:
                              year:
                                type: integer
                          h:
                            type: object
                            properties:
                              year:
                                type: integer
                          i10:
                            type: object
                            properties:
                              year:
                                type: integer
                          i100:
                            type: object
                            properties:
                              year:
                                type: integer
                          m:
                            type: object
                            properties:
                              year:
                                type: number
                          read10:
                            type: object
                            properties:
                              year:
                                type: number
                          riq:
                            type: object
                            properties:
                              year:
                                type: integer
                          tori:
                            type: object
                            properties:
                              year:
                                type: number
        '403':
          description: >
            Unable to get results
        '500':
          description:
            Metrics request blew up
  /metrics/{bibcode}:
    get:
      summary: Retrieve metrics for one bibcode
      description: >
        Similar to the `/metrics` endpoint, but returns data for a single bibcode only.
        Does not return indicators or timeseries.
      parameters:
        - name: bibcode
          description: Bibcode to return metrics for
          required: true
          in: path
          schema:
            type: string
      tags:
        - metrics
      security:
        - ApiKeySecurity: []
      responses:
        '200':
          description: >
            JSON containing the requested metrics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/basicMetricsResponse'
        '403':
          description: >
            Unable to get results
        '500':
          description:
            Metrics request blew up
  /metrics/detail:
    post:
      summary: Retrieve detail-level metrics for one or more bibcodes
      description: >
        Provides basic, year-by-year metrics on a per-bibcode basis.
      tags:
        - metrics
      security:
        - ApiKeySecurity: []
      requestBody:
        description: JSON containing the bibcode(s) to produce metrics for.
        content:
          application/json:
            schema:
              type: object
              required:
                - bibcodes
              properties:
                bibcodes:
                  description: Bibcode(s) to produce metrics for
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: JSON containing the requested metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  bibcode:
                    type: object
                    properties:
                      citations:
                        type: object
                        properties:
                          year:
                            type: integer
                      downloads:
                        type: object
                        properties:
                          year:
                            type: integer
                      reads:
                        type: object
                        properties:
                          year:
                            type: integer
                      ref_citations:
                        type: object
                        properties:
                          year:
                            type: integer
                  skipped bibcodes:
                    type: array
                    items:
                      type: string
        '403':
          description: >
            Unable to get results
        '500':
          description:
            Metrics request blew up
externalDocs:
  description: Complete documentation describing how to use this API
  url: https://github.com/adsabs/adsabs-dev-api
